{"version":3,"sources":["screen/channel/ChannelItem.js","screen/channel/ChannelView.js","utils/channel.js"],"names":["styled","video","className","Item","width","desktop","tabland","tabport","phone","spacing","as","Link","to","videoId","src","images","alt","title","modifiers","formatShortTitle","formatDate","publishedAt","media","list","useAuth","user","channelId","useParams","result","useQuery","queryKey","queryFn","channelRequest","get","then","data","channel","catch","response","useChannelInfo","isChannelIdle","isIdle","isChannelLoading","isLoading","isChannelSuccess","isSuccess","onSuccess","videos","setQueryDataForVideoInfo","channelVideos","useChannelVideos","isChannelVideosIdle","isChannelVideosLoading","isChannelVideosSuccess","isChannelVideosError","isError","errorChannelVideos","error","useAsync","isMutateLoading","run","subscribeItem","useSubscribeItem","createSubscribe","useCreateSubscribeItemInChannel","removeSubscribe","useRemoveSubscribeItemInChannel","useState","toLogin","setToLogin","handleClick","clickCB","y","image","subscribes","Spinner","onClick","flexy","wrap","Message","severity","text","message","map","_id","setFlex","x"],"mappings":"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","file":"static/js/11.3f691f22.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { ListGroup, Link as SLink, ImageContainer, Image, Title } from 'design/components';\r\nimport { media } from 'design/utils';\r\nimport { formatShortTitle, formatDate } from 'utils/format';\r\n\r\nconst ChannelItem = ({ video, className }) => {\r\n   return (\r\n      <ListGroup.Item\r\n         width={{ desktop: '15', tabland: '20', tabport: '30', phone: '90' }}\r\n         spacing={{ desktop: '2.5', tabport: '1.5', phone: '5' }}\r\n         className={className}\r\n      >\r\n         <SLink as={Link} to={`/watch/${video.videoId}`}>\r\n            <ImageContainer>\r\n               <Image src={video.images} alt={video.title} />\r\n            </ImageContainer>\r\n            <div>\r\n               <Title as='h2' modifiers='small'>\r\n                  {formatShortTitle(video.title)}\r\n               </Title>\r\n               <Title as='h3' modifiers={['small', 'exlight']}>\r\n                  {formatDate(video.publishedAt)}\r\n               </Title>\r\n            </div>\r\n         </SLink>\r\n      </ListGroup.Item>\r\n   );\r\n};\r\n\r\nexport default styled(ChannelItem)`\r\n   min-height: 25rem;\r\n   ${media.phone(`\r\n   margin-bottom: 2.5rem;\r\n      `)}\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { useChannelInfo, useChannelVideos } from 'utils/channel';\r\nimport {\r\n   useSubscribeItem,\r\n   useCreateSubscribeItemInChannel,\r\n   useRemoveSubscribeItemInChannel\r\n} from 'utils/subscription';\r\nimport { useAsync } from 'utils/hooks';\r\nimport styled from 'styled-components';\r\nimport {\r\n   Col,\r\n   FlexWrapper,\r\n   ImageContainer,\r\n   Image,\r\n   Title,\r\n   Button,\r\n   ListGroup,\r\n   Span\r\n} from 'design/components';\r\nimport { setFlex, media } from 'design/utils';\r\nimport useAuth from 'context/auth/authContext';\r\nimport ChannelItem from './ChannelItem';\r\nimport { AreaSpinner, Spinner } from 'components/Spinner';\r\nimport { Message } from 'components/Message';\r\n\r\nconst ChannelView = ({ className }) => {\r\n   const [{ user }] = useAuth();\r\n   const { channelId } = useParams();\r\n   const {\r\n      channel,\r\n      isIdle: isChannelIdle,\r\n      isLoading: isChannelLoading,\r\n      isSuccess: isChannelSuccess\r\n      // isError: isChannelError,\r\n      //error: errorChannel\r\n   } = useChannelInfo(channelId);\r\n   const {\r\n      channelVideos,\r\n      isIdle: isChannelVideosIdle,\r\n      isLoading: isChannelVideosLoading,\r\n      isSuccess: isChannelVideosSuccess,\r\n      isError: isChannelVideosError,\r\n      error: errorChannelVideos\r\n   } = useChannelVideos(channelId);\r\n   const {\r\n      isLoading: isMutateLoading,\r\n      //isError: isMutateError,\r\n      // error: errorMutate,\r\n      run\r\n      // reset\r\n   } = useAsync();\r\n\r\n   const subscribeItem = useSubscribeItem(channelId);\r\n   const { createSubscribe } = useCreateSubscribeItemInChannel(channelId);\r\n   const { removeSubscribe } = useRemoveSubscribeItemInChannel(channelId);\r\n   const [toLogin, setToLogin] = useState(false);\r\n\r\n   function renderChannelVideos(list) {\r\n      return list.map(function generateItem(video) {\r\n         return <ChannelItem key={video._id} video={video} />;\r\n      });\r\n   }\r\n\r\n   function handleClick(clickCB) {\r\n      return function () {\r\n         run(clickCB());\r\n      };\r\n   }\r\n\r\n   if (toLogin) return <Redirect to='/login' />;\r\n\r\n   if (isChannelIdle || isChannelLoading)\r\n      return (\r\n         <Col width='10'>\r\n            <AreaSpinner />\r\n         </Col>\r\n      );\r\n\r\n   if (isChannelSuccess)\r\n      return (\r\n         <Col width='10' className={className}>\r\n            <div className='channel__info'>\r\n               <FlexWrapper y='center'>\r\n                  <ImageContainer width='7.5rem'>\r\n                     <Image modifiers='round' src={channel.image} />\r\n                  </ImageContainer>\r\n                  <div className='channel__titlebox'>\r\n                     <Title modifiers={['medium', 'light']}>{channel.title}</Title>\r\n                     <Span modifiers={['medium', 'exlight']}>{channel.subscribes} subscribers</Span>\r\n                  </div>\r\n               </FlexWrapper>\r\n               {!isMutateLoading ? (\r\n                  <Button\r\n                     modifiers={['light', `${subscribeItem ? 'disable' : 'outline'}`]}\r\n                     onClick={\r\n                        user\r\n                           ? !subscribeItem\r\n                              ? handleClick(() => createSubscribe({ channel: channelId }))\r\n                              : handleClick(() => removeSubscribe({ channelId }))\r\n                           : () => setToLogin(true)\r\n                     }\r\n                  >\r\n                     Subscribed\r\n                  </Button>\r\n               ) : (\r\n                  <Spinner />\r\n               )}\r\n            </div>\r\n            <ListGroup flexy='center' wrap='true'>\r\n               {isChannelVideosIdle || isChannelVideosLoading ? (\r\n                  <AreaSpinner />\r\n               ) : isChannelVideosError && errorChannelVideos ? (\r\n                  <Message severity='error' text={errorChannelVideos.message} />\r\n               ) : isChannelVideosSuccess ? (\r\n                  renderChannelVideos(channelVideos)\r\n               ) : null}\r\n            </ListGroup>\r\n         </Col>\r\n      );\r\n};\r\n\r\nexport default styled(ChannelView)`\r\n   color: #fff;\r\n   .channel {\r\n      &__info {\r\n         ${setFlex({ x: 'space-between', y: 'center' })}\r\n         background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));\r\n         padding: 2rem 20%;\r\n         ${media.phone(`\r\n            padding: .5rem 1rem;\r\n            `)}\r\n      }\r\n      &__titlebox {\r\n         margin-left: 0.5rem;\r\n      }\r\n   }\r\n`;\r\n","import { channelRequest } from 'apis/backend';\r\nimport { setQueryDataForVideoInfo } from './video';\r\nimport { useQuery } from 'react-query';\r\nimport { queryClient } from 'context';\r\n\r\nfunction useChannelInfo(channelId) {\r\n   const result = useQuery({\r\n      queryKey: ['channelInfo', { channelId }],\r\n      queryFn: () =>\r\n         channelRequest\r\n            .get(`/${channelId}`)\r\n            .then(({ data: { data } }) => data.channel)\r\n            .catch(({ response: { data } }) => {\r\n               throw data;\r\n            })\r\n   });\r\n   return { ...result, channel: result.data };\r\n}\r\n\r\nfunction useChannelVideos(channelId) {\r\n   const result = useQuery({\r\n      queryKey: ['channelVideos', { channelId }],\r\n      queryFn: () =>\r\n         channelRequest\r\n            .get(`/${channelId}/videos`)\r\n            .then(({ data: { data } }) => data.data)\r\n            .catch(({ response: { data } }) => {\r\n               throw data;\r\n            }),\r\n      onSuccess: (videos) => {\r\n         //Once getting the video results, insert all results into the video info query\r\n         for (let video of videos) {\r\n            setQueryDataForVideoInfo(video);\r\n         }\r\n      }\r\n   });\r\n   return { ...result, channelVideos: result.data };\r\n}\r\n\r\nfunction setQueryDataForChannelSubscribe(channelId, type) {\r\n   const prevChannelInfo = queryClient.getQueryData(['channelInfo', { channelId }]);\r\n   queryClient.setQueryData(['channelInfo', { channelId }], (oldData) => {\r\n      return {\r\n         ...oldData,\r\n         subscribes: type === 'create' ? oldData.subscribes + 1 : oldData.subscribes - 1\r\n      };\r\n   });\r\n   return prevChannelInfo;\r\n}\r\n\r\nexport { useChannelInfo, useChannelVideos, setQueryDataForChannelSubscribe };\r\n"],"sourceRoot":""}