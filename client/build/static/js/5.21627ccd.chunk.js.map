{"version":3,"sources":["components/auth/Login.js"],"names":["Login","useAuthState","user","statusAuth","errorAuth","useAuthActions","login","resetAuthError","useForm","register","errors","handleSubmit","location","useLocation","url","useRouteMatch","useEffect","modifiers","to","state","from","width","severity","text","desktop","tabland","tabport","onSubmit","Group","mb","Input","type","name","ref","required","pattern","value","message","className","email","password"],"mappings":"0KAkEeA,UA1DD,WAAO,IAAD,IACuBC,cAAhCC,EADS,EACTA,KAAMC,EADG,EACHA,WAAYC,EADT,EACSA,UADT,EAEiBC,cAA1BC,EAFS,EAETA,MAAOC,EAFE,EAEFA,eAFE,EAG0BC,cAAnCC,EAHS,EAGTA,SAAUC,EAHD,EAGCA,OAAQC,EAHT,EAGSA,aACpBC,EAAWC,cACTC,EAAQC,cAARD,IAKR,OAJAE,qBAAU,WACPT,MACA,CAACA,EAAgBO,IAED,YAAfX,EAAiC,cAAC,IAAD,CAASc,UAAU,SACpDf,EAAa,cAAC,IAAD,CAAUgB,IAAI,UAAAN,EAASO,aAAT,eAAgBC,OAAQ,MAGpD,eAAC,IAAD,CAAKC,MAAM,KAAX,UACmB,aAAflB,GAA6BC,EAC3B,cAAC,IAAD,CAASkB,SAAS,QAAQC,KAAMnB,IAC/B,KACJ,eAAC,IAAD,CAAeiB,MAAO,CAAEG,QAAS,MAAOC,QAAS,MAAOC,QAAS,OAAjE,UACG,eAAC,IAAD,CAAOT,UAAU,MAAjB,qBACW,cAAC,IAAD,CAAMA,UAAU,UAAhB,sBAEX,eAAC,IAAD,CAAMU,SAAUhB,EAAaL,GAA7B,UACG,eAAC,IAAKsB,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOZ,UAAU,QAAjB,mBACA,cAAC,IAAKa,MAAN,CACGb,UAAU,UACVc,KAAK,OACLC,KAAK,QACLC,IAAKxB,EAAS,CACXyB,SAAU,4BACVC,QAAS,CACNC,MAAO,2CACPC,QAAS,6BAIlB,mBAAGC,UAAU,qBAAb,SAAmC5B,EAAO6B,OAAS7B,EAAO6B,MAAMF,aAEnE,eAAC,IAAKT,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOZ,UAAU,QAAjB,sBACA,cAAC,IAAKa,MAAN,CACGb,UAAU,UACVc,KAAK,WACLC,KAAK,WACLC,IAAKxB,EAAS,CACXyB,SAAU,kCAGhB,mBAAGI,UAAU,qBAAb,SAAmC5B,EAAO8B,UAAY9B,EAAO8B,SAASH,aAEzE,cAAC,IAAD,CAAQpB,UAAU,UAAlB","file":"static/js/5.21627ccd.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Redirect, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Col, FormContainer, Title, Span, Form, Label, Button } from '../../design/components';\nimport { useForm } from 'react-hook-form';\nimport { useAuthState } from '../../stores/auth/authStateContext';\nimport { useAuthActions } from '../../stores/auth/authActionContext';\nimport { Spinner, Message } from '../../design/elements';\n\nconst Login = () => {\n   const { user, statusAuth, errorAuth } = useAuthState();\n   const { login, resetAuthError } = useAuthActions();\n   const { register, errors, handleSubmit } = useForm();\n   const location = useLocation();\n   const { url } = useRouteMatch();\n   useEffect(() => {\n      resetAuthError();\n   }, [resetAuthError, url]);\n\n   if (statusAuth === 'pending') return <Spinner modifiers='dark' />;\n   if (user) return <Redirect to={location.state?.from || '/'} />;\n\n   return (\n      <Col width='12'>\n         {statusAuth === 'rejected' && errorAuth ? (\n            <Message severity='error' text={errorAuth} />\n         ) : null}\n         <FormContainer width={{ desktop: '50%', tabland: '70%', tabport: '90%' }}>\n            <Title modifiers='big'>\n               Account <Span modifiers='primary'>Login</Span>\n            </Title>\n            <Form onSubmit={handleSubmit(login)}>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Email</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     type='text'\n                     name='email'\n                     ref={register({\n                        required: 'You must specify an email',\n                        pattern: {\n                           value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                           message: 'Invalid email address'\n                        }\n                     })}\n                  />\n                  <p className='form__errormessage'>{errors.email && errors.email.message}</p>\n               </Form.Group>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Password</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     type='password'\n                     name='password'\n                     ref={register({\n                        required: 'You must specify a password'\n                     })}\n                  />\n                  <p className='form__errormessage'>{errors.password && errors.password.message}</p>\n               </Form.Group>\n               <Button modifiers='primary'>Login</Button>\n            </Form>\n         </FormContainer>\n      </Col>\n   );\n};\n\nexport default Login;\n"],"sourceRoot":""}