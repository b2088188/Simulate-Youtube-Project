{"version":3,"sources":["components/auth/Signup.js"],"names":["Signup","useAuthState","user","statusAuth","errorAuth","useAuthActions","signup","resetAuthError","useForm","register","errors","handleSubmit","watch","url","useRouteMatch","password","useRef","current","location","useLocation","useEffect","to","state","from","width","severity","text","desktop","tabland","tabport","modifiers","onSubmit","Group","mb","Input","name","type","ref","required","className","message","pattern","value","email","minLength","validate","passwordConfirm"],"mappings":"0KAqGeA,UA7FA,WAAO,IAAD,IACsBC,cAAhCC,EADU,EACVA,KAAMC,EADI,EACJA,WAAYC,EADR,EACQA,UADR,EAEiBC,cAA3BC,EAFU,EAEVA,OAAQC,EAFE,EAEFA,eAFE,EAGgCC,cAA1CC,EAHU,EAGVA,SAAUC,EAHA,EAGAA,OAAQC,EAHR,EAGQA,aAAcC,EAHtB,EAGsBA,MAChCC,EAAQC,cAARD,IACFE,EAAWC,iBAAO,IACxBD,EAASE,QAAUL,EAAM,WAAY,IACrC,IAAMM,EAAWC,cAMjB,OAJAC,qBAAU,WACPb,MACA,CAACA,EAAgBM,IAED,YAAfV,EAAiC,cAAC,IAAD,IACjCD,EAAa,cAAC,IAAD,CAAUmB,IAAI,UAAAH,EAASI,aAAT,eAAgBC,OAAQ,MAGpD,eAAC,IAAD,CAAKC,MAAM,KAAX,UACmB,aAAfrB,GAA6BC,EAC3B,cAAC,IAAD,CAASqB,SAAS,QAAQC,KAAMtB,IAC/B,KACJ,eAAC,IAAD,CAAeoB,MAAO,CAAEG,QAAS,MAAOC,QAAS,MAAOC,QAAS,OAAjE,UACG,eAAC,IAAD,CAAOC,UAAU,MAAjB,qBACW,cAAC,IAAD,CAAMA,UAAU,UAAhB,uBAEX,eAAC,IAAD,CAAMC,SAAUpB,EAAaL,GAA7B,UACG,eAAC,IAAK0B,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,kBACA,cAAC,IAAKI,MAAN,CACGJ,UAAU,UACVK,KAAK,OACLC,KAAK,OACLC,IAAK5B,EAAS,CACX6B,SAAU,kCAGhB,mBAAGC,UAAU,qBAAb,SAAmC7B,EAAOyB,MAAQzB,EAAOyB,KAAKK,aAEjE,eAAC,IAAKR,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,mBACA,cAAC,IAAKI,MAAN,CACGJ,UAAU,UACVM,KAAK,OACLD,KAAK,QACLE,IAAK5B,EAAS,CACX6B,SAAU,4BACVG,QAAS,CACNC,MAAO,2CACPF,QAAS,6BAIlB,mBAAGD,UAAU,qBAAb,SAAmC7B,EAAOiC,OAASjC,EAAOiC,MAAMH,aAEnE,eAAC,IAAKR,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,sBACA,cAAC,IAAKI,MAAN,CACGJ,UAAU,UACVM,KAAK,WACLD,KAAK,WACLE,IAAK5B,EAAS,CACX6B,SAAU,8BACVM,UAAW,CACRF,MAAO,EACPF,QAAS,gDAIlB,mBAAGD,UAAU,qBAAb,SAAmC7B,EAAOK,UAAYL,EAAOK,SAASyB,aAEzE,eAAC,IAAKR,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,8BACA,cAAC,IAAKI,MAAN,CACGJ,UAAU,UACVM,KAAK,WACLD,KAAK,kBACLE,IAAK5B,EAAS,CACXoC,SAAU,SAACH,GAAD,OACPA,IAAU3B,EAASE,SACnB,mDAGT,mBAAGsB,UAAU,qBAAb,SACI7B,EAAOoC,iBAAmBpC,EAAOoC,gBAAgBN,aAGxD,cAAC,IAAD,CAAQV,UAAU,UAAlB","file":"static/js/6.1a380e00.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useLocation, Redirect, useRouteMatch } from 'react-router-dom';\nimport { Col, FormContainer, Title, Span, Form, Label, Button } from '../../design/components';\nimport { useForm } from 'react-hook-form';\nimport { useAuthState } from '../../stores/auth/authStateContext';\nimport { useAuthActions } from '../../stores/auth/authActionContext';\nimport { Message, Spinner } from '../../design/elements';\n\nconst Signup = () => {\n   const { user, statusAuth, errorAuth } = useAuthState();\n   const { signup, resetAuthError } = useAuthActions();\n   const { register, errors, handleSubmit, watch } = useForm();\n   const { url } = useRouteMatch();\n   const password = useRef({});\n   password.current = watch('password', '');\n   const location = useLocation();\n\n   useEffect(() => {\n      resetAuthError();\n   }, [resetAuthError, url]);\n\n   if (statusAuth === 'pending') return <Spinner />;\n   if (user) return <Redirect to={location.state?.from || '/'} />;\n\n   return (\n      <Col width='12'>\n         {statusAuth === 'rejected' && errorAuth ? (\n            <Message severity='error' text={errorAuth} />\n         ) : null}\n         <FormContainer width={{ desktop: '50%', tabland: '70%', tabport: '90%' }}>\n            <Title modifiers='big'>\n               Account <Span modifiers='primary'>Signup</Span>\n            </Title>\n            <Form onSubmit={handleSubmit(signup)}>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Name</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     name='name'\n                     type='text'\n                     ref={register({\n                        required: 'You must specify a username'\n                     })}\n                  />\n                  <p className='form__errormessage'>{errors.name && errors.name.message}</p>\n               </Form.Group>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Email</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     type='text'\n                     name='email'\n                     ref={register({\n                        required: 'You must specify an email',\n                        pattern: {\n                           value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                           message: 'Invalid email address'\n                        }\n                     })}\n                  />\n                  <p className='form__errormessage'>{errors.email && errors.email.message}</p>\n               </Form.Group>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Password</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     type='password'\n                     name='password'\n                     ref={register({\n                        required: 'You must specify a password',\n                        minLength: {\n                           value: 8,\n                           message: 'Password must have at least 8 characters'\n                        }\n                     })}\n                  />\n                  <p className='form__errormessage'>{errors.password && errors.password.message}</p>\n               </Form.Group>\n               <Form.Group mb='1'>\n                  <Label modifiers='large'>Password Confirm</Label>\n                  <Form.Input\n                     modifiers='outline'\n                     type='password'\n                     name='passwordConfirm'\n                     ref={register({\n                        validate: (value) =>\n                           value === password.current ||\n                           'The passwords do no match, please try again'\n                     })}\n                  />\n                  <p className='form__errormessage'>\n                     {errors.passwordConfirm && errors.passwordConfirm.message}\n                  </p>\n               </Form.Group>\n               <Button modifiers='primary'>Signup</Button>\n            </Form>\n         </FormContainer>\n      </Col>\n   );\n};\n\nexport default Signup;\n"],"sourceRoot":""}