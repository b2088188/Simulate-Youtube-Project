{"version":3,"sources":["components/channelView/ChannelItem.js","components/channelView/ChannelView.js"],"names":["styled","video","className","Item","width","desktop","tabland","tabport","phone","spacing","as","Link","to","videoId","src","images","alt","title","modifiers","formatShortTitle","formatDate","publishedAt","media","list","user","useAuthState","useChannel","channel","statusChannel","errorChannel","channelVideos","statusChannelVideos","errorChannelVideos","getChannel","getChannelVideos","channelSubscribeHandle","useSubscribe","currentUserSub","getCurrentSubscribe","createSubscribe","deleteSubscribe","channelId","useParams","useState","toLogin","setToLogin","isSubscribed","useEffect","_id","text","severity","y","image","subscribes","onClick","a","onSubscribeHandle","flexy","wrap","map","setFlex","x"],"mappings":"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","file":"static/js/7.adf70eda.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ListGroup, Link as SLink, ImageContainer, Image, Title } from '../../design/components';\nimport { media } from '../../design/utils';\nimport { formatShortTitle, formatDate } from '../../utils/Format';\nconst ChannelItem = ({ video, className }) => {\n   return (\n      <ListGroup.Item\n         width={{ desktop: '15', tabland: '20', tabport: '30', phone: '90' }}\n         spacing={{ desktop: '2.5', tabport: '1.5', phone: '5' }}\n         className={className}\n      >\n         <SLink as={Link} to={`/watch/${video.videoId}`}>\n            <ImageContainer>\n               <Image src={video.images} alt={video.title} />\n            </ImageContainer>\n            <div>\n               <Title as='h2' modifiers='small'>\n                  {formatShortTitle(video.title)}\n               </Title>\n               <Title as='h3' modifiers={['small', 'exlight']}>\n                  {formatDate(video.publishedAt)}\n               </Title>\n            </div>\n         </SLink>\n      </ListGroup.Item>\n   );\n};\n\nexport default styled(ChannelItem)`\n   min-height: 25rem;\n   ${media.phone(`\n   margin-bottom: 2.5rem;\n      `)}\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Redirect } from 'react-router-dom';\nimport styled from 'styled-components';\nimport {\n   Col,\n   FlexWrapper,\n   ImageContainer,\n   Image,\n   Title,\n   Button,\n   ListGroup,\n   Span\n} from '../../design/components';\nimport { setFlex, media } from '../../design/utils';\nimport { useAuthState } from '../../stores/auth/authStateContext';\nimport useChannel from '../../stores/channel/channelContext';\nimport useSubscribe from '../../stores/subscriptions/subscribeContext';\nimport ChannelItem from './ChannelItem';\nimport { Spinner, Message } from '../../design/elements';\n\nconst ChannelView = ({ className }) => {\n   const { user } = useAuthState();\n   const [\n      {\n         channel,\n         statusChannel,\n         errorChannel,\n         channelVideos,\n         statusChannelVideos,\n         errorChannelVideos\n      },\n      { getChannel, getChannelVideos, channelSubscribeHandle }\n   ] = useChannel();\n   const [\n      { currentUserSub },\n      { getCurrentSubscribe, createSubscribe, deleteSubscribe }\n   ] = useSubscribe();\n   const { channelId } = useParams();\n   const [toLogin, setToLogin] = useState(false);\n   const isSubscribed = currentUserSub ? true : false;\n\n   useEffect(() => {\n      getChannel(channelId);\n      getChannelVideos(channelId);\n   }, [channelId, getChannelVideos, getChannel]);\n   useEffect(() => {\n      if (user && channel) getCurrentSubscribe(user._id, channel._id);\n   }, [user, channel, getCurrentSubscribe]);\n\n   function onSubscribeHandle(isSubscribed, user, channel) {\n      return async function () {\n         if (!isSubscribed) {\n            await createSubscribe(user._id, channel._id);\n            channelSubscribeHandle('add');\n         } else {\n            await deleteSubscribe(user._id, channel._id);\n            channelSubscribeHandle('delete');\n         }\n      };\n   }\n   function renderChannelVideos(list) {\n      return list.map(function generateItem(video) {\n         return <ChannelItem key={video._id} video={video} />;\n      });\n   }\n\n   if (toLogin) return <Redirect to='/login' />;\n\n   if (statusChannel === 'idle' || statusChannel === 'pending') return <Spinner modifiers='dark' />;\n   if (statusChannel === 'rejected' && errorChannel)\n      return (\n         <Col width='10'>\n            <Message text={errorChannel} severity='error' />;\n         </Col>\n      );\n\n   if (statusChannel === 'resolved')\n      return (\n         <Col width='10' className={className}>\n            <div className='channel__info'>\n               <FlexWrapper y='center'>\n                  <ImageContainer width='7.5rem'>\n                     <Image modifiers='round' src={channel.image} />\n                  </ImageContainer>\n                  <div className='channel__titlebox'>\n                     <Title modifiers={['medium', 'light']}>{channel.title}</Title>\n                     <Span modifiers={['medium', 'exlight']}>{channel.subscribes} subscribers</Span>\n                  </div>\n               </FlexWrapper>\n               <Button\n                  modifiers={['light', `${isSubscribed ? 'disable' : 'outline'}`]}\n                  onClick={\n                     user ? onSubscribeHandle(isSubscribed, user, channel) : () => setToLogin(true)\n                  }\n               >\n                  Subscribed\n               </Button>\n            </div>\n            <ListGroup flexy='center' wrap='true'>\n               {statusChannelVideos === 'idle' || statusChannelVideos === 'pending' ? (\n                  <Spinner modifiers='dark' />\n               ) : statusChannelVideos === 'rejected' && errorChannelVideos ? (\n                  <Message severity='error' text={errorChannelVideos} />\n               ) : statusChannelVideos === 'resolved' ? (\n                  renderChannelVideos(channelVideos)\n               ) : null}\n            </ListGroup>\n         </Col>\n      );\n};\n\nexport default styled(ChannelView)`\n   color: #fff;\n   .channel {\n      &__info {\n         ${setFlex({ x: 'space-around', y: 'center' })}\n         background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));\n         padding: 2rem 1rem;\n         ${media.phone(`\n            padding: .5rem 1rem;\n            `)}\n      }\n      &__titlebox {\n         margin-left: 0.5rem;\n      }\n   }\n`;\n"],"sourceRoot":""}