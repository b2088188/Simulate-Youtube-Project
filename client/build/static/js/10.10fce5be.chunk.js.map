{"version":3,"sources":["screen/auth/Signup.js"],"names":["Signup","useAuth","user","isError","error","signup","setError","useForm","register","errors","handleSubmit","watch","password","useRef","current","location","useLocation","useEffect","to","state","from","width","severity","text","desktop","tabland","tabport","modifiers","onSubmit","Group","mb","name","type","ref","required","className","message","pattern","value","email","minLength","validate","passwordConfirm"],"mappings":"gTAkGeA,UA1FA,WAAO,IAAD,IACuCC,cADvC,0BACTC,EADS,EACTA,KAAMC,EADG,EACHA,QAASC,EADN,EACMA,MADN,OACiBC,EADjB,EACiBA,OAAQC,EADzB,EACyBA,SADzB,EAEgCC,cAA1CC,EAFU,EAEVA,SAAUC,EAFA,EAEAA,OAAQC,EAFR,EAEQA,aAAcC,EAFtB,EAEsBA,MAClCC,EAAWC,iBAAO,IACxBD,EAASE,QAAUH,EAAM,WAAY,IACrC,IAAMI,EAAWC,cAOjB,OALAC,qBAAU,WACP,OAAO,kBAAMX,EAAS,SACtB,CAACA,IAGAJ,EAAa,cAAC,IAAD,CAAUgB,IAAI,UAAAH,EAASI,aAAT,eAAgBC,OAAQ,MAGpD,eAAC,IAAD,CAAKC,MAAM,KAAX,UACIlB,GAAWC,EAAQ,cAAC,IAAD,CAASkB,SAAS,QAAQC,KAAMnB,IAAY,KAChE,kBAIGiB,MAAO,CAAEG,QAAS,MAAOC,QAAS,MAAOC,QAAS,OAJrD,UAMG,eAAC,IAAD,CAAOC,UAAU,MAAjB,qBACW,cAAC,IAAD,CAAMA,UAAU,UAAhB,uBAEX,eAAC,IAAD,CAAMC,SAAUlB,EAAaL,GAA7B,UACG,eAAC,IAAKwB,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,kBACA,cAAC,IAAD,CACGI,KAAK,OACLC,KAAK,OACLC,IAAKzB,EAAS,CACX0B,SAAU,kCAGhB,mBAAGC,UAAU,qBAAb,SAAmC1B,EAAOsB,MAAQtB,EAAOsB,KAAKK,aAEjE,eAAC,IAAKP,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,mBACA,cAAC,IAAD,CACGK,KAAK,OACLD,KAAK,QACLE,IAAKzB,EAAS,CACX0B,SAAU,4BACVG,QAAS,CACNC,MAAO,2CACPF,QAAS,6BAIlB,mBAAGD,UAAU,qBAAb,SAAmC1B,EAAO8B,OAAS9B,EAAO8B,MAAMH,aAEnE,eAAC,IAAKP,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,sBACA,cAAC,IAAD,CACGK,KAAK,WACLD,KAAK,WACLE,IAAKzB,EAAS,CACX0B,SAAU,8BACVM,UAAW,CACRF,MAAO,EACPF,QAAS,gDAIlB,mBAAGD,UAAU,qBAAb,SAAmC1B,EAAOG,UAAYH,EAAOG,SAASwB,aAEzE,eAAC,IAAKP,MAAN,CAAYC,GAAG,IAAf,UACG,cAAC,IAAD,CAAOH,UAAU,QAAjB,8BACA,cAAC,IAAD,CACGK,KAAK,WACLD,KAAK,kBACLE,IAAKzB,EAAS,CACXiC,SAAU,SAACH,GAAD,OACPA,IAAU1B,EAASE,SACnB,mDAGT,mBAAGqB,UAAU,qBAAb,SACI1B,EAAOiC,iBAAmBjC,EAAOiC,gBAAgBN,aAGxD,cAAC,IAAD,CAAQT,UAAU,UAAlB","file":"static/js/10.10fce5be.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\nimport { Col, FormContainer, Title, Span, Form, Label, Button, Input } from 'design/components';\r\nimport { useForm } from 'react-hook-form';\r\nimport useAuth from 'context/auth/authContext';\r\nimport { Message } from 'components/Message';\r\n\r\nconst Signup = () => {\r\n   const [{ user, isError, error }, { signup, setError }] = useAuth();\r\n   const { register, errors, handleSubmit, watch } = useForm();\r\n   const password = useRef({});\r\n   password.current = watch('password', '');\r\n   const location = useLocation();\r\n\r\n   useEffect(() => {\r\n      return () => setError(null);\r\n   }, [setError]);\r\n\r\n   // if (statusAuth === 'pending') return <Spinner />;\r\n   if (user) return <Redirect to={location.state?.from || '/'} />;\r\n\r\n   return (\r\n      <Col width='12'>\r\n         {isError && error ? <Message severity='error' text={error} /> : null}\r\n         <FormContainer\r\n            css={`\r\n               margin-top: 5rem;\r\n            `}\r\n            width={{ desktop: '50%', tabland: '70%', tabport: '90%' }}\r\n         >\r\n            <Title modifiers='big'>\r\n               Account <Span modifiers='primary'>Signup</Span>\r\n            </Title>\r\n            <Form onSubmit={handleSubmit(signup)}>\r\n               <Form.Group mb='1'>\r\n                  <Label modifiers='large'>Name</Label>\r\n                  <Input\r\n                     name='name'\r\n                     type='text'\r\n                     ref={register({\r\n                        required: 'You must specify a username'\r\n                     })}\r\n                  />\r\n                  <p className='form__errormessage'>{errors.name && errors.name.message}</p>\r\n               </Form.Group>\r\n               <Form.Group mb='1'>\r\n                  <Label modifiers='large'>Email</Label>\r\n                  <Input\r\n                     type='text'\r\n                     name='email'\r\n                     ref={register({\r\n                        required: 'You must specify an email',\r\n                        pattern: {\r\n                           value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                           message: 'Invalid email address'\r\n                        }\r\n                     })}\r\n                  />\r\n                  <p className='form__errormessage'>{errors.email && errors.email.message}</p>\r\n               </Form.Group>\r\n               <Form.Group mb='1'>\r\n                  <Label modifiers='large'>Password</Label>\r\n                  <Input\r\n                     type='password'\r\n                     name='password'\r\n                     ref={register({\r\n                        required: 'You must specify a password',\r\n                        minLength: {\r\n                           value: 8,\r\n                           message: 'Password must have at least 8 characters'\r\n                        }\r\n                     })}\r\n                  />\r\n                  <p className='form__errormessage'>{errors.password && errors.password.message}</p>\r\n               </Form.Group>\r\n               <Form.Group mb='1'>\r\n                  <Label modifiers='large'>Password Confirm</Label>\r\n                  <Input\r\n                     type='password'\r\n                     name='passwordConfirm'\r\n                     ref={register({\r\n                        validate: (value) =>\r\n                           value === password.current ||\r\n                           'The passwords do no match, please try again'\r\n                     })}\r\n                  />\r\n                  <p className='form__errormessage'>\r\n                     {errors.passwordConfirm && errors.passwordConfirm.message}\r\n                  </p>\r\n               </Form.Group>\r\n               <Button modifiers='primary'>Signup</Button>\r\n            </Form>\r\n         </FormContainer>\r\n      </Col>\r\n   );\r\n};\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}